#!/usr/bin/env ruby
require 'rubygems'
$:.unshift(File.expand_path(File.join(File.dirname(__FILE__), "..", 'lib')))
require "bundler/setup"
require 'logger'
require 'rdf/n3'
require 'rdf/ntriples'
require 'getoptlong'
require 'open-uri'

def run(input, options)
  reader_class = RDF::Reader.for(options[:input_format].to_sym)
  raise "Reader not found for #{options[:input_format]}" unless reader_class

  prefixes = {}
  start = Time.new
  num = 0
  if options[:parse_only]
    include RDF::N3::Meta
    include RDF::N3::Parser
    puts "\nparse #{input.read}---\n\n" unless options[:quiet]
    input.rewind
    if options[:quiet]
      $stdout = StringIO.new
    end
    test(input, BRANCHES, REGEXPS)
    if options[:quiet]
      $stdout = STDOUT
      print "."
    end
  elsif options[:output_format] == :ntriples || options[:quiet]
    reader_class.new(input, options[:parser_options]).each do |statement|
      num += 1
      if options[:errors] && statement.invalid?
        $stderr.puts "Invalid statement at #{r.lineno}: #{statement.inspect}"
      elsif options[:quiet]
        print "." if options[:quiet] == 1
      else
       options[:output].puts statement.to_ntriples
      end
    end
  elsif options[:output_format] == :inspect
    reader_class.new(input, options[:parser_options]).each do |statement|
      num += 1
      options[:output].puts statement.inspect
    end
  else
    r = reader_class.new(input, options[:parser_options])
    g = RDF::Graph.new << r
    num = g.count
    options[:output].puts g.dump(options[:output_format], base_uri: options[:base_uri], prefixes: r.prefixes, standard_prefixes: true)
  end
  puts
  secs = Time.new - start
  puts "Parsed #{num} statements in #{secs} seconds @ #{num/secs} statements/second."
rescue Exception => e
  fname = input.respond_to?(:path) ? input.path : "-stdin-"
  STDERR.puts("Error in #{fname}: #{e.message}")
  STDERR.puts "Backtrace: " + e.backtrace.join("\n  ")
  raise e
end

logger = Logger.new(STDERR)
logger.level = Logger::WARN
logger.formatter = lambda {|severity, datetime, progname, msg| "#{severity}: #{msg}\n"}

parser_options = {
  base_uri: "http://example.com",
  logger: logger,
  validate: false,
}

options = {
  parser_options: parser_options,
  output: STDOUT,
  output_format: :ntriples,
  input_format: :n3,
}
input = nil

opts = GetoptLong.new(
  ["--dbg", GetoptLong::NO_ARGUMENT],
  ["--errors", GetoptLong::NO_ARGUMENT],
  ["--execute", "-e", GetoptLong::REQUIRED_ARGUMENT],
  ["--canonicalize", GetoptLong::NO_ARGUMENT],
  ["--format", GetoptLong::REQUIRED_ARGUMENT],
  ["--input-format", GetoptLong::REQUIRED_ARGUMENT],
  ["--output", "-o", GetoptLong::REQUIRED_ARGUMENT],
  ["--profile", GetoptLong::NO_ARGUMENT],
  ["--progress", GetoptLong::NO_ARGUMENT],
  ["--quiet", GetoptLong::NO_ARGUMENT],
  ["--uri", GetoptLong::REQUIRED_ARGUMENT],
  ["--validate", GetoptLong::NO_ARGUMENT],
  ["--verbose", GetoptLong::NO_ARGUMENT]
)
opts.each do |opt, arg|
  case opt
  when '--dbg'          then logger.level = Logger::DEBUG
  when '--canonicalize' then parser_options[:canonicalize] = true
  when '--errors'       then options[:errors] = true
  when '--execute'      then input = arg
  when '--format'       then options[:output_format] = arg.to_sym
  when '--input-format' then options[:input_format] = arg.to_sym
  when '--output'       then options[:output] = File.open(arg, "w")
  when '--profile'      then options[:profile] = true
  when '--progress'     then logger.level = Logger::INFO
  when '--quiet'
    options[:quiet] = true
    logger.level = Logger::FATAL
  when '--uri'          then parser_options[:base_uri] = arg
  when '--validate'     then parser_options[:debug] ||= 1
  when '--verbose'      then $verbose = true
  end
end

if ARGV.empty?
  s = input ? input : $stdin.read
  run(StringIO.new(s), options)
else
  ARGV.each do |test_file|
    run(Kernel.open(test_file), options)
  end
end
puts
